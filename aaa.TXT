<!DOCTYPE html>
<html>
<head>
    <title>3D RPG –ö–ª–∏–∫–µ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π</title>
    <style>
                /* –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ */
        
        /* –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ */
        #rating-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }
        #rating-table {
            background: #16213e;
            padding: 20px;
            border-radius: 10px;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        #rating-table h2 {
            color: #f95959;
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #4e4e8d;
        }
        th {
            background: #0f3460;
        }
        #close-rating {
            display: block;
            margin: 20px auto 0;
            padding: 10px 20px;
            background: #f95959;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        body {
            font-family: 'Arial', sans-serif;
            background: #1a1a2e;
            color: #e6e6e6;
            text-align: center;
            margin: 0;
            padding: 20px;
            perspective: 1000px;
        }
        #game-container {
            max-width: 800px;
            margin: 0 auto;
            background: #16213e;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
        }
        .resource {
            font-size: 18px;
            margin: 5px 0;
            padding: 3px;
        }
        .upgrade, .skill {
            background: #4e4e8d;
            color: white;
            border: none;
            padding: 10px;
            margin: 5px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
            width: 100%;
        }
        .upgrade:hover, .skill:hover {
            background: #3a3a6d;
        }
        .upgrade:disabled, .skill:disabled {
            background: #333;
            cursor: not-allowed;
        }
        .upgrade-card {
            background: #0f3460;
            padding: 10px;
            margin: 10px;
            border-radius: 8px;
        }
        #upgrades-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        h2 {
            color: #f95959;
            border-bottom: 2px solid #f95959;
            padding-bottom: 5px;
            margin-top: 20px;
        }
        
        /* 3D –º–æ–±—ã */
        #mob-container {
            margin: 30px auto;
            width: 200px;
            height: 250px;
            position: relative;
            transform-style: preserve-3d;
        }
        .mob {
            width: 100%;
            height: 180px;
            position: relative;
            cursor: pointer;
            transition: all 0.3s;
            transform-style: preserve-3d;
            animation: float 3s infinite ease-in-out;
        }
        @keyframes float {
            0%, 100% { transform: translateY(0) rotateY(0); }
            50% { transform: translateY(-10px) rotateY(10deg); }
        }
        .mob:active {
            transform: scale(0.95) translateY(-5px);
        }
        .mob-health {
            width: 100%;
            height: 10px;
            background: #333;
            border-radius: 5px;
            margin-top: 10px;
            overflow: hidden;
        }
        .mob-health-fill {
            height: 100%;
            background: #f95959;
            transition: width 0.3s;
        }
        .mob-name {
            margin-top: 5px;
            font-weight: bold;
            height: 20px;
        }
        
        /* 3D CSS –º–æ–±—ã */
        .mob-slime {
            background: #55ff55;
            border-radius: 50%;
            box-shadow: 
                inset 0 0 20px #44cc44,
                0 5px 15px rgba(0,0,0,0.3);
            transform: rotateY(20deg);
        }
        .mob-slime::before, .mob-slime::after {
            content: "";
            position: absolute;
            background: white;
            border-radius: 50%;
            box-shadow: 0 0 5px rgba(0,0,0,0.5);
        }
        .mob-slime::before {
            width: 20px;
            height: 20px;
            top: 40%;
            left: 30%;
        }
        .mob-slime::after {
            width: 20px;
            height: 20px;
            top: 40%;
            left: 50%;
        }
        
        .mob-goblin {
            background: linear-gradient(to bottom, #55aa55, #448844);
            border-radius: 15px 15px 5px 5px;
            box-shadow: 
                inset 0 -10px 20px rgba(0,0,0,0.2),
                0 5px 15px rgba(0,0,0,0.3);
        }
        .mob-goblin::before {
            content: ">=<";
            position: absolute;
            color: #333;
            font-size: 24px;
            top: 40%;
            left: 50%;
            transform: translateX(-50%);
            text-shadow: 1px 1px 0 white;
        }
        
        .mob-skeleton {
            background: #f5f5f5;
            border-radius: 10px;
            box-shadow: 
                inset 0 0 20px #ddd,
                0 5px 15px rgba(0,0,0,0.3);
        }
        .mob-skeleton::before {
            content: "‚ò†";
            position: absolute;
            font-size: 40px;
            top: 30%;
            left: 50%;
            transform: translateX(-50%);
            color: #333;
        }
        
        .mob-dragon {
            background: linear-gradient(to bottom, #ff5555, #cc0000);
            border-radius: 50% 50% 0 0;
            box-shadow: 
                inset 0 -10px 20px rgba(0,0,0,0.3),
                0 5px 15px rgba(0,0,0,0.3);
        }
        .mob-dragon::before {
            content: "üî•";
            position: absolute;
            font-size: 30px;
            top: 20%;
            left: 50%;
            transform: translateX(-50%);
        }
        
        /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
        @keyframes takeDamage {
            0% { transform: translateX(0) rotateY(0); }
            25% { transform: translateX(-10px) rotateY(-20deg); }
            50% { transform: translateX(10px) rotateY(20deg); }
            75% { transform: translateX(-10px) rotateY(-10deg); }
            100% { transform: translateX(0) rotateY(0); }
        }
        .mob-take-damage {
            animation: takeDamage 0.5s;
        }
        
        @keyframes mobDeath {
            0% { transform: translateY(0) rotate(0); }
            100% { transform: translateY(100px) rotate(90deg); opacity: 0; }
        }
        .mob-death {
            animation: mobDeath 0.5s forwards;
        }
        
        /* –õ–æ–≥ –±–æ—è */
        #combat-log {
            max-height: 100px;
            overflow-y: auto;
            background: rgba(0,0,0,0.3);
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            text-align: left;
        }
        
        /* –í—Å–ø–ª—ã–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç */
        .float-text {
            position: absolute;
            font-weight: bold;
            font-size: 18px;
            text-shadow: 1px 1px 2px black;
            animation: floatUp 1s forwards;
            pointer-events: none;
            z-index: 10;
        }
        @keyframes floatUp {
            0% { transform: translateY(0); opacity: 1; }
            100% { transform: translateY(-50px); opacity: 0; }
        }
        
        /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —É—Ä–æ–≤–Ω—è */
        .level-progress {
            width: 100%;
            height: 10px;
            background: #333;
            border-radius: 5px;
            margin: 5px 0;
            overflow: hidden;
        }
        .level-progress-fill {
            height: 100%;
            background: linear-gradient(to right, #f95959, #ff9e00);
            transition: width 0.5s;
        }
        
        /* –°–ª–æ–∂–Ω–æ—Å—Ç—å */
        .difficulty-indicator {
            margin: 10px 0;
            padding: 5px;
            background: rgba(0,0,0,0.3);
            border-radius: 5px;
        }
        #about-button {
      position: absolute;
      top: 10px;
      left: 10px;
      background-color: #4CAF50;
      color: #fff;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #about-button:hover {
      background-color: #3e8e41;
    }
    </style>
</head>
<body>
    <div id="game-container">
        <!-- –í–µ—Å—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π HTML –æ—Å—Ç–∞–µ—Ç—Å—è -->
        
        <button id="show-rating" class="upgrade" style="margin-top: 20px;">
            –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        </button>
    </div>

    <div id="rating-container">
        <div id="rating-table">
            <h2>–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥</h2>
            <table>
                <thead>
                    <tr>
                        <th>–ú–µ—Å—Ç–æ</th>
                        <th>–ò–º—è</th>
                        <th>–£—Ä–æ–≤–µ–Ω—å</th>
                        <th>–ó–æ–ª–æ—Ç–æ</th>
                    </tr>
                </thead>
                <tbody id="rating-body">
                    <!-- –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    <tr><td colspan="4">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</td></tr>
                </tbody>
            </table>
            <button id="close-rating">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    </div>
    <div id="game-container">
        <h1>3D RPG –ö–ª–∏–∫–µ—Ä</h1>
        
        <div class="difficulty-indicator">
            –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: <span id="difficulty">1</span>/5
        </div>
        
        <div class="resource">–ó–æ–ª–æ—Ç–æ: <span id="gold">0</span></div>
        <div class="resource">–£—Ä–æ–≤–µ–Ω—å: <span id="level">1</span></div>
        <div class="level-progress">
            <div id="level-progress" class="level-progress-fill"></div>
        </div>
        <div class="resource">–û–ø—ã—Ç: <span id="exp">0</span>/<span id="exp-needed">100</span></div>
        
        <div id="mob-container">
            <div id="mob" class="mob mob-slime"></div>
            <div class="mob-health">
                <div id="mob-health" class="mob-health-fill"></div>
            </div>
            <div id="mob-name" class="mob-name">–°–ª–∞–π–º</div>
        </div>
        
        <div class="resource">–°–∏–ª–∞ –∞—Ç–∞–∫–∏: <span id="attack-power">1</span></div>
        <div class="resource">DPS: <span id="auto-power">0</span>/—Å–µ–∫</div>
        
        <div id="combat-log"></div>
        
        <h2>–£–ª—É—á—à–µ–Ω–∏—è</h2>
        <div id="upgrades-container">
            <div class="upgrade-card">
                <h3>–ê—Ç–∞–∫–∞</h3>
                <button class="upgrade" onclick="buyUpgrade('attack', 0)">
                    +1 —Å–∏–ª–∞ (–¶–µ–Ω–∞: 10)
                </button>
                <button class="upgrade" onclick="buyUpgrade('attack', 1)">
                    +5 —Å–∏–ª—ã (–¶–µ–Ω–∞: 100)
                </button>
            </div>
            
            <div class="upgrade-card">
                <h3>–ê–≤—Ç–æ–∞—Ç–∞–∫–∞</h3>
                <button class="upgrade" onclick="buyUpgrade('auto', 0)">
                    +1/—Å–µ–∫ (–¶–µ–Ω–∞: 50)
                </button>
                <button class="upgrade" onclick="buyUpgrade('auto', 1)">
                    +10/—Å–µ–∫ (–¶–µ–Ω–∞: 400)
                </button>
            </div>
        </div>
        
        <h2>–ù–∞–≤—ã–∫–∏</h2>
        <div class="upgrade-card">
            <button id="skill-critical" class="skill" onclick="buySkill('critical')">
                –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (15%)<br>
                –¢—Ä–µ–±—É–µ—Ç—Å—è: 3 —É—Ä–æ–≤–µ–Ω—å<br>
                –¶–µ–Ω–∞: 200
            </button>
            <button id="skill-aoe" class="skill" onclick="buySkill('aoe')">
                –£–¥–∞—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏ (25%)<br>
                –¢—Ä–µ–±—É–µ—Ç—Å—è: 5 —É—Ä–æ–≤–µ–Ω—å<br>
                –¶–µ–Ω–∞: 500
            </button>
            <button id="skill-life" class="skill" onclick="buySkill('life')">
                –í–∞–º–ø–∏—Ä–∏–∑–º (10%)<br>
                –¢—Ä–µ–±—É–µ—Ç—Å—è: 7 —É—Ä–æ–≤–µ–Ω—å<br>
                –¶–µ–Ω–∞: 800
            </button>
            <button id="skill-ultimate" class="skill" onclick="buySkill('ultimate')">
                –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ (5%)<br>
                –¢—Ä–µ–±—É–µ—Ç—Å—è: 10 —É—Ä–æ–≤–µ–Ω—å<br>
                –¶–µ–Ω–∞: 1500
            </button>
        </div>
    </div>
    <div id="author-text">by nqrelz

    </div>
    <button id="about-button">–û–± –∏–≥—Ä–µ</button>
    <script>
      document.getElementById("about-button").addEventListener("click", function() {
        window.open("first.html", "_blank");
      });
    </script>
   

    <script>
        
          const ratingData = [
            { name: "–ò–≥—Ä–æ–∫1", level: 15, gold: 12500 },
            { name: "–ò–≥—Ä–æ–∫2", level: 12, gold: 9800 },
            { name: "–ò–≥—Ä–æ–∫3", level: 10, gold: 7500 }
        ];
        // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const game = {
            gold: 0,
            level: 1,
            exp: 0,
            expNeeded: 100,
            attackPower: 1,
            autoPower: 0,
            difficulty: 1,
            skills: {
                critical: { 
                    bought: false, 
                    levelReq: 3, 
                    cost: 200, 
                    chance: 0.15, 
                    multiplier: 2 
                },
                aoe: { 
                    bought: false, 
                    levelReq: 5, 
                    cost: 500, 
                    chance: 0.25, 
                    aoeDamage: 0.5 
                },
                life: {
                    bought: false,
                    levelReq: 7,
                    cost: 800,
                    chance: 0.1,
                    healPercent: 0.3
                },
                ultimate: {
                    bought: false,
                    levelReq: 10,
                    cost: 1500,
                    chance: 0.05,
                    multiplier: 5
                }
            },
            mobs: [
                { 
                    name: "–°–ª–∞–π–º", 
                    class: "mob-slime", 
                    baseHealth: 30, 
                    health: 30, 
                    baseReward: 5,
                    baseExp: 10
                },
                { 
                    name: "–ì–æ–±–ª–∏–Ω", 
                    class: "mob-goblin", 
                    baseHealth: 60, 
                    health: 60, 
                    baseReward: 15,
                    baseExp: 25
                },
                { 
                    name: "–°–∫–µ–ª–µ—Ç", 
                    class: "mob-skeleton", 
                    baseHealth: 90, 
                    health: 90, 
                    baseReward: 25,
                    baseExp: 40
                },
                { 
                    name: "–î—Ä–∞–∫–æ–Ω", 
                    class: "mob-dragon", 
                    baseHealth: 150, 
                    health: 150, 
                    baseReward: 40,
                    baseExp: 60
                }
            ],
            currentMob: 0,
            upgrades: {
                attack: [
                    { cost: 10, power: 1 },
                    { cost: 100, power: 5 }
                ],
                auto: [
                    { cost: 50, power: 1 },
                    { cost: 400, power: 10 }
                ]
            },
            log: []
            inventory: [],
    items: [
        {id: 1, name: "–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", effect: "heal", value: 50, emoji: "‚ù§Ô∏è"},
        {id: 2, name: "–£—Å–∏–ª–µ–Ω–∏–µ –∞—Ç–∞–∫–∏", effect: "boost", value: 5, emoji: "‚öîÔ∏è"},
        {id: 3, name: "–ú–µ—à–æ–∫ –∑–æ–ª–æ—Ç–∞", effect: "gold", value: 100, emoji: "üí∞"}
    ],
    // ...
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º:
function openInventory() {
    const modal = document.getElementById('inventory-modal');
    const itemsContainer = document.getElementById('inventory-items');
    
    itemsContainer.innerHTML = '';
    game.inventory.forEach((item, index) => {
        const itemElement = document.createElement('div');
        itemElement.style.background = '#0f3460';
        itemElement.style.padding = '10px';
        itemElement.style.borderRadius = '5px';
        itemElement.style.cursor = 'pointer';
        itemElement.style.textAlign = 'center';
        itemElement.innerHTML = `
            <div style="font-size:24px;">${item.emoji}</div>
            <div>${item.name}</div>
            <small>${item.effect === 'heal' ? `+${item.value} HP` : 
                   item.effect === 'boost' ? `+${item.value} –∞—Ç–∞–∫–∏` : 
                   `+${item.value} –∑–æ–ª–æ—Ç–∞`}</small>
        `;
        
        itemElement.addEventListener('click', () => useItem(index));
        itemsContainer.appendChild(itemElement);
    });
    
    modal.style.display = 'flex';
}

function closeInventory() {
    document.getElementById('inventory-modal').style.display = 'none';
}

function useItem(index) {
    const item = game.inventory[index];
    if (!item) return;
    
    switch(item.effect) {
        case 'heal':
            addLog(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${item.name}! +${item.value} HP`);
            break;
        case 'boost':
            game.attackPower += item.value;
            addLog(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${item.name}! –ê—Ç–∞–∫–∞ +${item.value}`);
            break;
        case 'gold':
            game.gold += item.value;
            addLog(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${item.name}! +${item.value} –∑–æ–ª–æ—Ç–∞`);
            break;
    }
    
    game.inventory.splice(index, 1);
    openInventory(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    render();
}

function addRandomItem() {
    if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        const randomItem = {...game.items[Math.floor(Math.random() * game.items.length)]};
        game.inventory.push(randomItem);
        addLog(`–ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${randomItem.name}!`);
    }
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é defeatMob():
function defeatMob() {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    addRandomItem(); // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    // ...
}

// –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
document.getElementById('game-container').innerHTML += `
    <button onclick="openInventory()" class="upgrade" style="margin-top:10px;">
        –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (${game.inventory.length})
    </button>`;
        };
        

        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        const elements = {
            gold: document.getElementById('gold'),
            level: document.getElementById('level'),
            exp: document.getElementById('exp'),
            expNeeded: document.getElementById('exp-needed'),
            levelProgress: document.getElementById('level-progress'),
            attackPower: document.getElementById('attack-power'),
            autoPower: document.getElementById('auto-power'),
            mob: document.getElementById('mob'),
            mobHealth: document.getElementById('mob-health'),
            mobName: document.getElementById('mob-name'),
            combatLog: document.getElementById('combat-log'),
            skillCritical: document.getElementById('skill-critical'),
            skillAoe: document.getElementById('skill-aoe'),
            skillLife: document.getElementById('skill-life'),
            skillUltimate: document.getElementById('skill-ultimate'),
            difficulty: document.getElementById('difficulty')
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        function init() {
            loadGame();
            updateDifficulty();
            spawnMob(0);
            render();
            
            // –ê–≤—Ç–æ–∞—Ç–∞–∫–∞
            setInterval(autoAttack, 1000);
            
            // –ö–ª–∏–∫ –ø–æ –º–æ–±—É
            elements.mob.addEventListener('click', attack);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        function updateDifficulty() {
            game.difficulty = Math.min(Math.floor(game.level / 5) + 1, 5);
            elements.difficulty.textContent = game.difficulty;
            
            // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–±–æ–≤
            game.mobs.forEach(mob => {
                mob.health = mob.baseHealth * game.difficulty;
                mob.maxHealth = mob.baseHealth * game.difficulty;
            });
        }

        // –°–ø–∞–≤–Ω –º–æ–±–∞
        function spawnMob(index) {
            game.currentMob = index;
            const mob = game.mobs[index];
            mob.health = mob.baseHealth * game.difficulty;
            mob.maxHealth = mob.baseHealth * game.difficulty;
            
            // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
            elements.mob.className = "mob " + mob.class;
            void elements.mob.offsetWidth; // Trigger reflow
            
            elements.mobName.textContent = mob.name;
            updateHealth();
            
            addLog(`–ü–æ—è–≤–∏–ª—Å—è ${mob.name} (–£—Ä. ${game.difficulty})!`);
        }
        

        // –ê—Ç–∞–∫–∞ –º–æ–±–∞
        function attack() {
            let damage = game.attackPower;
            let isCritical = false;
            let isUltimate = false;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
            if (game.skills.critical.bought && Math.random() < game.skills.critical.chance) {
                damage = Math.floor(damage * game.skills.critical.multiplier);
                isCritical = true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–π –∞—Ç–∞–∫–∏
            if (game.skills.ultimate.bought && Math.random() < game.skills.ultimate.chance) {
                damage = Math.floor(damage * game.skills.ultimate.multiplier);
                isUltimate = true;
            }
            
            dealDamage(damage, false, isCritical, isUltimate);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞—Ä–∞ –ø–æ –ø–ª–æ—â–∞–¥–∏
            if (game.skills.aoe.bought && Math.random() < game.skills.aoe.chance) {
                const aoeDamage = Math.floor(damage * game.skills.aoe.aoeDamage);
                addLog(`–£–¥–∞—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏! –î–æ–ø. —É—Ä–æ–Ω: ${aoeDamage}`);
                dealDamage(aoeDamage, false, false);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–º–ø–∏—Ä–∏–∑–º–∞
            if (game.skills.life.bought && Math.random() < game.skills.life.chance) {
                const healAmount = Math.floor(damage * game.skills.life.healPercent);
                addLog(`–í–∞–º–ø–∏—Ä–∏–∑–º! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${healAmount} HP`);
                showFloatingText(`+${healAmount} HP`, '#55ff55');
            }
        }

        // –ê–≤—Ç–æ–∞—Ç–∞–∫–∞
        function autoAttack() {
            if (game.autoPower > 0) {
                dealDamage(game.autoPower, true);
            }
        }

        // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
        function dealDamage(amount, isAuto = false, isCritical = false, isUltimate = false) {
            const mob = game.mobs[game.currentMob];
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
            elements.mob.classList.add('mob-take-damage');
            setTimeout(() => {
                elements.mob.classList.remove('mob-take-damage');
            }, 500);
            
            // –í—Å–ø–ª—ã–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç —É—Ä–æ–Ω–∞
            const color = isUltimate ? '#ff00ff' : 
                         isCritical ? '#ff5555' : 
                         isAuto ? '#8888ff' : '#ffffff';
            showFloatingText(amount, color);
            
            mob.health -= amount;
            addLog(`${isAuto ? '–ê–≤—Ç–æ–∞—Ç–∞–∫–∞' : '–í—ã'} –Ω–∞–Ω–µ—Å–ª–∏ ${amount} —É—Ä–æ–Ω–∞ ${mob.name}${
                isUltimate ? ' (–£–õ–¨–¢–†–ê!!!)' : 
                isCritical ? ' (–ö—Ä–∏—Ç!)' : ''}`);
            
            if (mob.health <= 0) {
                const reward = mob.baseReward * game.difficulty;
                const expReward = mob.baseExp * game.difficulty;
                
                game.gold += reward;
                addExp(expReward);
                addLog(`–ü–æ–±–µ–¥–∞! –ü–æ–ª—É—á–µ–Ω–æ ${reward} –∑–æ–ª–æ—Ç–∞ –∏ ${expReward} –æ–ø—ã—Ç–∞`);
                
                // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ—Ä—Ç–∏
                elements.mob.classList.add('mob-death');
                
                // –°–ø–∞–≤–Ω —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–æ–±–∞
                setTimeout(() => {
                    const nextMob = (game.currentMob + 1) % game.mobs.length;
                    spawnMob(nextMob);
                }, 500);
            }
            
            updateHealth();
            render();
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç
        function showFloatingText(text, color) {
            const floatText = document.createElement('div');
            floatText.className = 'float-text';
            floatText.textContent = text;
            floatText.style.color = color;
            floatText.style.left = `${Math.random() * 100 + 150}px`;
            floatText.style.top = `${Math.random() * 50 + 150}px`;
            
            document.body.appendChild(floatText);
            setTimeout(() => floatText.remove(), 1000);
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        function addExp(amount) {
            game.exp += amount;
            if (game.exp >= game.expNeeded) {
                game.level++;
                game.exp -= game.expNeeded;
                game.expNeeded = Math.floor(game.expNeeded * 1.5);
                addLog(`–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! –¢–µ–ø–µ—Ä—å –≤—ã ${game.level} —É—Ä–æ–≤–Ω—è`);
                
                // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã –∞—Ç–∞–∫–∏ —Å —É—Ä–æ–≤–Ω–µ–º
                game.attackPower += Math.floor(game.level / 2);
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                updateDifficulty();
            }
            updateLevelProgress();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è
        function updateLevelProgress() {
            const percent = (game.exp / game.expNeeded) * 100;
            elements.levelProgress.style.width = `${percent}%`;
        }

        // –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
        function buyUpgrade(type, index) {
            const upgrade = game.upgrades[type][index];
            
            if (game.gold >= upgrade.cost) {
                game.gold -= upgrade.cost;
                
                if (type === 'attack') {
                    game.attackPower += upgrade.power;
                    addLog(`–£–ª—É—á—à–µ–Ω–∞ –∞—Ç–∞–∫–∞ +${upgrade.power}`);
                } else {
                    game.autoPower += upgrade.power;
                    addLog(`–£–ª—É—á—à–µ–Ω–∞ –∞–≤—Ç–æ–∞—Ç–∞–∫–∞ +${upgrade.power}/—Å–µ–∫`);
                }
                
                render();
            }
        }

        // –ü–æ–∫—É–ø–∫–∞ –Ω–∞–≤—ã–∫–∞
        function buySkill(skill) {
            const skillData = game.skills[skill];
            
            if (!skillData.bought && game.gold >= skillData.cost && game.level >= skillData.levelReq) {
                game.gold -= skillData.cost;
                skillData.bought = true;
                addLog(`–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –Ω–∞–≤—ã–∫: ${elements[`skill-${skill}`].textContent.split('(')[0]}`);
                render();
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–±–∞
        function updateHealth() {
            const mob = game.mobs[game.currentMob];
            const percent = (mob.health / mob.maxHealth) * 100;
            elements.mobHealth.style.width = `${percent}%`;
            
            // –¶–≤–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è
            if (percent < 20) elements.mobHealth.style.background = '#ff0000';
            else if (percent < 50) elements.mobHealth.style.background = '#ff9933';
            else elements.mobHealth.style.background = '#4CAF50';
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–æ–≥
        function addLog(message) {
            game.log.push(message);
            if (game.log.length > 5) game.log.shift();
            elements.combatLog.innerHTML = game.log.map(msg => `<div>${msg}</div>`).join('');
            elements.combatLog.scrollTop = elements.combatLog.scrollHeight;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        function render() {
            elements.gold.textContent = game.gold;
            elements.level.textContent = game.level;
            elements.exp.textContent = game.exp;
            elements.expNeeded.textContent = game.expNeeded;
            elements.attackPower.textContent = game.attackPower;
            elements.autoPower.textContent = game.autoPower;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π
            document.querySelectorAll('.upgrade').forEach((btn, i) => {
                const type = i < 2 ? 'attack' : 'auto';
                const index = i % 2;
                const upgrade = game.upgrades[type][index];
                
                btn.disabled = game.gold < upgrade.cost;
            });
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ã–∫–æ–≤
            elements.skillCritical.disabled = game.gold < game.skills.critical.cost || 
                                          game.level < game.skills.critical.levelReq || 
                                          game.skills.critical.bought;
            
            elements.skillAoe.disabled = game.gold < game.skills.aoe.cost || 
                                      game.level < game.skills.aoe.levelReq || 
                                      game.skills.aoe.bought;
            
            elements.skillLife.disabled = game.gold < game.skills.life.cost ||
                                       game.level < game.skills.life.levelReq ||
                                       game.skills.life.bought;
            
            elements.skillUltimate.disabled = game.gold < game.skills.ultimate.cost ||
                                           game.level < game.skills.ultimate.levelReq ||
                                           game.skills.ultimate.bought;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
            if (game.skills.critical.bought) {
                elements.skillCritical.textContent = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (–ö—É–ø–ª–µ–Ω–æ)";
            }
            if (game.skills.aoe.bought) {
                elements.skillAoe.textContent = "–£–¥–∞—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏ (–ö—É–ø–ª–µ–Ω–æ)";
            }
            if (game.skills.life.bought) {
                elements.skillLife.textContent = "–í–∞–º–ø–∏—Ä–∏–∑–º (–ö—É–ø–ª–µ–Ω–æ)";
            }
            if (game.skills.ultimate.bought) {
                elements.skillUltimate.textContent = "–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ (–ö—É–ø–ª–µ–Ω–æ)";
            }
            
            updateLevelProgress();
            saveGame();
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
        function saveGame() {
            localStorage.setItem('3dRpgClicker', JSON.stringify({
                gold: game.gold,
                level: game.level,
                exp: game.exp,
                expNeeded: game.expNeeded,
                attackPower: game.attackPower,
                autoPower: game.autoPower,
                skills: game.skills,
                difficulty: game.difficulty
            }));
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
        function loadGame() {
            const saved = localStorage.getItem('3dRpgClicker');
            if (saved) {
                const data = JSON.parse(saved);
                Object.assign(game, data);
                addLog('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            }
        }
     // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–ª–∏–∫–∏
     function setupFastClick() {
            let lastClickTime = 0;
            const mobElement = document.getElementById('mob');
            
            mobElement.addEventListener('mousedown', function() {
                lastClickTime = Date.now();
                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
                this.style.transform = 'scale(0.95) translateY(-5px)';
            });
            
            mobElement.addEventListener('mouseup', function() {
                // –ë—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                this.style.transform = '';
                
                // –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –±—ã—Å—Ç—Ä—ã–º, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ç–∞–∫—É
                if (Date.now() - lastClickTime < 150) {
                    attack();
                }
            });
            
            mobElement.addEventListener('mouseleave', function() {
                // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä —É—à–µ–ª —Å —ç–ª–µ–º–µ–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.style.transform = '';
            });
        }

        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        function showRating() {
            document.getElementById('rating-container').style.display = 'flex';
            updateRatingTable();
        }

        function hideRating() {
            document.getElementById('rating-container').style.display = 'none';
        }

        function updateRatingTable() {
            const tbody = document.getElementById('rating-body');
            tbody.innerHTML = '';
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –∏ –∑–æ–ª–æ—Ç—É
            const sortedRating = [...ratingData].sort((a, b) => {
                if (b.level !== a.level) return b.level - a.level;
                return b.gold - a.gold;
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            const playerExists = sortedRating.some(p => p.name === "–í—ã");
            if (!playerExists) {
                sortedRating.push({
                    name: "–í—ã",
                    level: game.level,
                    gold: game.gold
                });
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø-10
            const top10 = sortedRating.slice(0, 10);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            top10.forEach((player, index) => {
                const row = document.createElement('tr');
                if (player.name === "–í—ã") {
                    row.style.fontWeight = 'bold';
                    row.style.color = '#f95959';
                }
                
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${player.name}</td>
                    <td>${player.level}</td>
                    <td>${player.gold}</td>
                `;
                
                tbody.appendChild(row);
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        function init() {
            loadGame();
            updateDifficulty();
            spawnMob(0);
            render();
            setupFastClick(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–ª–∏–∫–∏
            
            // –ê–≤—Ç–æ–∞—Ç–∞–∫–∞
            setInterval(autoAttack, 1000);
            
            // –ö–Ω–æ–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
            document.getElementById('show-rating').addEventListener('click', showRating);
            document.getElementById('close-rating').addEventListener('click', hideRating);
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥
            ratingData.push({
                name: "–í—ã",
                level: game.level,
                gold: game.gold
            });
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        window.addEventListener('beforeunload', saveGame);

        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        init();
    </script>
   <!-- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ index.html –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–æ–º </body> -->
<div id="inventory-modal" style="display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:1000;justify-content:center;align-items:center;">
    <div style="background:#16213e;padding:20px;border-radius:10px;width:80%;max-width:500px;">
        <h2 style="color:#f95959;">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h2>
        <div id="inventory-items" style="display:grid;grid-template-columns:repeat(3,1fr);gap:10px;margin:15px 0;">
            <!-- –°–ª–æ—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å -->
        </div>
        <button onclick="closeInventory()" style="background:#f95959;color:white;border:none;padding:10px 20px;border-radius:5px;cursor:pointer;">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
</div>


    
    
</body>
</html>